version: "3.8"
name: simple-app

services:
  backend-write:
    build:
      context: ./simple
      dockerfile: Dockerfile
    container_name: backend-write
    restart: always
    ports:
      - "${BACKEND_WRITE_PORT-8080}:8080"
    environment:
      - FRONT_URL=http://localhost:${FRONTEND_PORT:-5173}/
      - RDB_URL=mysql://rdbms:3306/${RDB_DATABASE:-testdb}
      - RDB_USER=${RDB_USER:-user}
      - RDB_PASSWORD=${RDB_PASSWORD:-pw}
      - RDB_DRIVER_CLASS=com.mysql.cj.jdbc.Driver
      - KAFKA_URL=broker:9094
    depends_on:
      rdbms:
        condition: service_started
      broker:
        condition: service_healthy

  backend-read:
    build:
      context: ./simple-readonly
      dockerfile: Dockerfile
    container_name: backend-read
    restart: always
    ports:
      - "${BACKEND_READ_PORT-8000}:8000"
    environment:
      - MONGO_URL=mongodb://${MONGO_USER:-root}:${MONGO_PASSWORD:-example}@mongo:27017/
      - MONGO_DATABASE=${MONGO_DATABASE:-testdb}
      - KAFKA_URL=broker:9094
      - KAFKA_TOPIC=${KAFKA_TOPIC:-test-topic}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:-trash-group}
    depends_on:
      - mongo

  frontend:
    build:
      context: ./simple-front
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "${FRONTEND_PORT-5173}:5173"
    environment:
      - BACKEND_WRITE_URL=http://backend-write:8080
      - BACKEND_READ_URL=http://backend-read:8000
    depends_on:
      - backend-write
      - backend-read

  rdbms:
    image: mysql:8.0
    container_name: rdbms
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${RDB_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${RDB_DATABASE:-testdb}
      MYSQL_USER: ${RDB_USER:-user}
      MYSQL_PASSWORD: ${RDB_PASSWORD:-pw}
    ports:
      - "${RDB_PORT-3306}:3306"
    volumes:
      - ./db/data:/var/lib/mysql

  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: always
    ports:
      - "${MONGO_PORT-27017}:27017"
    volumes:
      - ./db/mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-example}

  metric:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "${METRIC_PORT-9090}:9090"
    volumes:
      - ./metric/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - backend-write

  dashboard:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "${DASHBOARD_PORT-3000}:3000"
    volumes:
      - ./metric/grafana:/var/lib/grafana
    depends_on:
      - metric

  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: kafka-broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://broker:9092,CONTROLLER://broker:9093,CONTAINER://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,CONTROLLER://broker:9093,CONTAINER://broker:9094
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,CONTAINER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_DIRS: /var/lib/kafka/data

    volumes:
      - ./kafka/kafka-data:/var/lib/kafka/data

    healthcheck:
      test: nc -z broker 9092 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT-1234}:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local-kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9094
    depends_on:
      broker:
        condition: service_healthy
